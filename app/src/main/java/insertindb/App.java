/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package insertindb;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class App {

    private String pathToExmaple = "app/src/main/resources/example.xdxf";
    private String url = "jdbc:postgresql://localhost:8081/postgres";
    private String username = "postgres";
    private String password = "17TypeofMG";

    private String sqlQuerry;

    private static Map<String, String> libRu = new HashMap<>();
    private static Map<String, String> libEn = new HashMap<>();


    private String insertRuWord = """
                insert into ru_en_translations(ru_word, en_word)
                values(?, ?)
            """;

    private String checkInsertRuWord = """
            select
                ru_word,
                en_word
            from ru_en_translations
            where ru_word = ?
            """;

    private String insertEnWord = """
            insert into en_ru_translations(en_word, ru_word)
            values(?, ?)
            """;

    private String checkInsertEnWord = """
                select
                    en_word,
                    ru_word
                from en_ru_translations
                where en_word = ?
            """;

    private String updateRuWord = """
            update ru_en_translations
            set
                en_word = ?
            where ru_word = ?
            """;

    private String updateEnWord = """
           update en_ru_tranlations
           set ru_word = ?
           where en_word = ?
            """;

    public static void main(String[] args) throws IOException {
        App app = new App();
        app.startParsingXML();
        System.out.println(libRu);
        System.out.println(libEn);
    }

    private void startParsingXML() throws IOException {
        List<String> buffer = new ArrayList<>();
        buffer = Files.readAllLines(Path.of(pathToExmaple));
        for (int i = 0; i < buffer.size(); i++) {
           parsXMLDictionary(buffer.get(i), buffer.get(++i));
           i++;
        }
    }

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, username, password);
    }

    private PreparedStatement getStatement(Connection connection) throws SQLException {
        return connection.prepareStatement(sqlQuerry);
    }

    private void insurtInDB() {

    }


    private void parsXMLDictionary(String ru, String en) {
        String[] translation = new String[2];
        Matcher mRu = Pattern.compile("&quot;(.+)&quot;").matcher(ru);
        Matcher mEn = Pattern.compile("<k>(.+)</k>").matcher(en);
        if (mRu.find()){
            translation[0] = mRu.group(1);
        }
        if (mEn.find()){
            translation[1] = mEn.group(1);
        }
        checkInMap(translation);
    }

    private void checkInMap(String[] tr) {
        if (libRu.containsKey(tr[0])) {
            String s = libRu.get(tr[0]);
            s = s + ", " + tr[1];
            libRu.put(tr[0], s);
        } else {
            libRu.put(tr[0], tr[1]);
        }

        if (libEn.containsKey(tr[1])) {
            String s = libEn.get(tr[1]);
            s += ", " + tr[0];
            libEn.put(tr[1], s);
        } else {
            libEn.put(tr[1], tr[0]);
        }
    }

//   &quot;СЧЁТЫ&quot;</ar>
// <ar><k>abacuses</k>
// ABACUSES

}
